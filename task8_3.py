# 3. Создайте собственный класс-исключение,
# который должен проверять содержимое списка на
# наличие только чисел. Проверить работу исключения
# на реальном примере. Необходимо запрашивать у пользователя
# данные и заполнять список. Класс-исключение должен
# контролировать типы данных элементов списка.
#
# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока
# пользователь сам не остановит работу скрипта,
# введя, например, команду “stop”. При этом скрипт
# завершается, сформированный список выводится на экран.
#
# Подсказка: для данного задания примем,
# что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо
# реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен
# не позволить пользователю ввести текст (не число)
# и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.
#

class MyException(Exception):
    def __init__(self):
        self.my_list = []

    def add_numbers(self):

        while True:
            try:
                numbers = int(input('Enter a number to add to the list: '))
                self.my_list.append(numbers)
                print(f'This is how current list looks like: {self.my_list}')
            except (ValueError, MyException):
                print(f'You tried to add str, bool or something else that is not int.'
                      f'Restart the program and try again. You finished at: {self.my_list}')
                break


list1 = MyException()
list1.add_numbers()
